---
source: crates/rolldown_testing/src/integration_test.rs
---
# warnings

## EVAL

```text
[EVAL] Warning: Use of direct `eval` function is strongly discouraged as it poses security risks and may cause issues with minification.
   ╭─[ nested-eval.js:3:17 ]
   │
 3 │     console.log(x, eval('x'))
   │                    ──┬─  
   │                      ╰─── Use of direct `eval` here.
   │ 
   │ Help: Consider using indirect eval. For more information, check the documentation: https://rolldown.rs/guide/troubleshooting#avoiding-direct-eval
───╯

```

## EVAL

```text
[EVAL] Warning: Use of direct `eval` function is strongly discouraged as it poses security risks and may cause issues with minification.
   ╭─[ top-level-eval.js:2:16 ]
   │
 2 │ console.log(x, eval('x'))
   │                ──┬─  
   │                  ╰─── Use of direct `eval` here.
   │ 
   │ Help: Consider using indirect eval. For more information, check the documentation: https://rolldown.rs/guide/troubleshooting#avoiding-direct-eval
───╯

```

## EVAL

```text
[EVAL] Warning: Use of direct `eval` function is strongly discouraged as it poses security risks and may cause issues with minification.
   ╭─[ ts-namespace-eval.ts:3:17 ]
   │
 3 │     console.log(x, eval('x'))
   │                    ──┬─  
   │                      ╰─── Use of direct `eval` here.
   │ 
   │ Help: Consider using indirect eval. For more information, check the documentation: https://rolldown.rs/guide/troubleshooting#avoiding-direct-eval
───╯

```

# Assets

## nested-eval.js

```js
//#region nested-eval.js
(() => {
	const x = 1;
	console.log(x, eval("x"));
})();

//#endregion
```

## nested-no-eval.js

```js
//#region nested-no-eval.js
console.log(1, evil("x"));

//#endregion
```

## top-level-eval.js

```js
//#region top-level-eval.js
const x = 1;
console.log(x, eval("x"));

//#endregion
```

## top-level-no-eval.js

```js
//#region top-level-no-eval.js
console.log(1, evil("x"));

//#endregion
```

## ts-namespace-eval.js

```js
//#region ts-namespace-eval.ts
let z;
(function(_z) {
	const x = _z.x = 1;
	console.log(x, eval("x"));
})(z || (z = {}));

//#endregion
```

## ts-namespace-no-eval.js

```js
//#region ts-namespace-no-eval.ts
let y;
(function(_y) {
	const x = _y.x = 1;
	console.log(x, evil("x"));
})(y || (y = {}));

//#endregion
```
